Author: ZIQI JIA 693241
ziqij@student.unimelb.edu.au

Reflection

For this project, I implemented a successful concurrent simulation system of King Arthur and the Knights of the Round Table. In this system, I regard Hall and Agenda (for new and complete quests) as monitors, in which define synchronised functions to be called by Knight and KingArthur. KingArthur calls the functions of Hall to start and end meeting, and Knight calls the function of Hall to process their tasks. When the knight arrives the hall, it will firstly check if the knight satisfies the condition to enter the hall, if not just wait outside. When the knight enters the hall, it will wait for a while and then sit at the table. Before starting the meeting, King need to enter the hall anytime and check if all knights are sited on the table. once the meeting begins, the knight needs to release their completed quests if they have one and acquire a new quest if the new agenda is not empty, and then the knight need to stand up from the table. The king will check if all knights are stand up from the table before end the meeting and leave the hall. The knight needs to leave the hall after the king left to complete their quests and return back the hall. When the knight release the quest, the quest need to be added to completeAgenda, and when the knight acquire the new quest, the new quest need to be removed from the newAgenda. I make an assumption here that the maximum quests number of an agenda is 200. In this project, I try to use a very important technology in java called monitor to effectively wait the requesting thread by monitoring on each flag and call the thread again once the flags are changed.

During the implementation, I define a lot of conditions to represent different status of King and Knight, there is a critical problem with this is that it may easily make mistakes on the logic of while loops. You need to make sure that the conditions are correctly defined to identify whether to execute a function and assign correct values afterwards, otherwise the system will not execute the process at the correct time. for instance, the releaseQuest() should only be processed when the knight complete the current quest and the quest is not null. In addition, when checking all knights’ status of sitting or standing, I firstly implement two global variables to represent these two statuses and add checking code into the start and end meeting functions, however it does not work. Then, I write two separate checking functions to loop each knight’s status of sitting on the table and return a Boolean value that is used to identify if need to wait the following thread or not. This method works, which makes me very confused. 

Ultimately, my implementation successfully satisfies the requirements of the system, the executing sequence of the Knight and King Arthur is correct, and the quests can be added to and remove from the correct agenda.
